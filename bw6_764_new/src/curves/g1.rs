use crate::{Fq, Fr};
use ark_ec::{
    models::{ModelParameters, SWModelParameters},
    short_weierstrass_jacobian::{GroupAffine, GroupProjective},
};
use ark_ff::{field_new, Zero};

pub type G1Affine = GroupAffine<Parameters>;
pub type G1Projective = GroupProjective<Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = 0
    #[rustfmt::skip]
    const COEFF_A: Fq = field_new!(Fq, "0");

    /// COEFF_B = 3
    #[rustfmt::skip]
    const COEFF_B: Fq = field_new!(Fq, "3");

    /// COFACTOR =
    /// 18761113507437584042257724496253649777533321532752457817124580676172013756405106010407665665625358696877349224316931
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x11b4f40000000003,
        0x453d26ac55830003,
        0x446c8631e74ed9c4,
        0xa32d3a4151208aab,
        0xb20c7f1dfc1d3110,
        0x79e4b6c96f069a04,
    ];

    /// COFACTOR^(-1) mod r =
    /// 1956993840270071985617259173997433438399944617049966604713013602772536749107484845036798246487089288471655625980462
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = field_new!(Fr, "1956993840270071985617259173997433438399944617049966604713013602772536749107484845036798246487089288471655625980462");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G1_GENERATOR_X, G1_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(_elem: &Self::BaseField) -> Self::BaseField {
        Self::BaseField::zero()
    }
}

/// G1_GENERATOR_X =
/// 13551891404656973288409158991532979240647755701887013800985311015735724149274804748621667971093117689155980034570369203635536304220602034439499944826281781071344656199610388828244176885469992982070326760684261459747698212973422097
#[rustfmt::skip]
pub const G1_GENERATOR_X: Fq = field_new!(Fq, "13551891404656973288409158991532979240647755701887013800985311015735724149274804748621667971093117689155980034570369203635536304220602034439499944826281781071344656199610388828244176885469992982070326760684261459747698212973422097");

/// G1_GENERATOR_Y =
/// 37039561621921852164057614768810157227317773933974666768060920636431950103211935189997595410137340510618994904080356172741922891434749213497798638780890282078003998345788825263647954696408980788015287185711673034638568978288970779
#[rustfmt::skip]
pub const G1_GENERATOR_Y: Fq = field_new!(Fq, "37039561621921852164057614768810157227317773933974666768060920636431950103211935189997595410137340510618994904080356172741922891434749213497798638780890282078003998345788825263647954696408980788015287185711673034638568978288970779");
