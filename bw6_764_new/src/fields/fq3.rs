use ark_ff::{
    field_new,
    fields::fp3::{Fp3, Fp3Parameters},
};

use crate::{
    fields::{FQ_ONE, FQ_ZERO},
    Fq,
};

pub type Fq3 = Fp3<Fq3Parameters>;

pub struct Fq3Parameters;

impl Fp3Parameters for Fq3Parameters {
    type Fp = Fq;

    /// NONRESIDUE = 2
    // Fq3 = Fq\[u\]/u^3-2
    #[rustfmt::skip]
    const NONRESIDUE: Fq = field_new!(Fq, "2");

    // (MODULUS^3 - 1) % 2^TWO_ADICITY == 0
    const TWO_ADICITY: u32 = 42;

    // (T-1)/2 with T = (MODULUS^3-1) / 2^TWO_ADICITY
    #[rustfmt::skip]
    const T_MINUS_ONE_DIV_TWO: &'static [u64] = &[
        0x4ec86dc0024d47b7,
        0x18adc261b0718963,
        0xb0a75a47dc0eda77,
        0x94654b172dc81c4c,
        0x83ee408cd4200f09,
        0xda6ea14efdf493e2,
        0x651d056c392fbaf3,
        0x7f53d4c5ac67be87,
        0x363ddde627665a70,
        0x19c765c78b83e5bf,
        0xd347df7de43fc508,
        0x3b3d40bc99704f60,
        0x408f5b9760420585,
        0xddeb63ddc3d1d727,
        0xfeadcc34e061eb37,
        0xbfe776dff90d6b49,
        0x503822c90ddad6db,
        0xd3008b0219451a7f,
        0xc111c095309751b0,
        0xb974c0f63505bb27,
        0xa58507ece97c0f73,
        0x96643b5ac774fb9e,
        0x83515567bbe3e51a,
        0x497e7a034067a265,
        0x1a0b72a0bce0a3cf,
        0xbfe1a843a8d411c1,
        0x10b6f4cf48dffb,
        0xb4a49610e846592d,
        0x88cf4808ee614f52,
        0x3db88dd926987c90,
        0xfb80a8d05a005c5e,
        0xbeec0e17fda562e2,
        0xbc17b4a941865d86,
        0xa1278ace8471b8a9,
        0x7f605e3f2a56cd4e,
        0x8e
    ];

    // NONRESIDUE^T % q
    #[rustfmt::skip]
    const QUADRATIC_NONRESIDUE_TO_T: (Fq, Fq, Fq) = (
        field_new!(Fq, "14001554721567412751618636238782751074827346499328268364905222457199893173911270018311456815019349283516749333649785157532813908833172943963121791670791287526249103607111012837370666769077702379752120192631385020399497492521931076"),
        FQ_ZERO,
        FQ_ZERO,
    );

    // NQR ^ (MODULUS^i - 1)/3, i=0,1,2 with NQR = u = 2??
    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP3_C1: &'static [Fq] = &[
        FQ_ONE,
        field_new!(Fq, "10657617573509013381109838777859813828752698485010031468067404158142727458091443273471812453523641434043880328903387872531445833781648740830086389541545860051137283451392850981420577616053507303737190704153100286"),
        field_new!(Fq, "50282768576993852396837016734785827995873736060526044576695150098366033779477101935690773566664707984443383101531713651773202185700462399106346600290809556774367272997391698519046257613281472927139474876682186129147018051720314882"),
    ];

    // NQR ^ (2*MODULUS^i - 2)/3, i=0,1,2 with NQR = 2??
    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP3_C2: &'static [Fq] = &[
        FQ_ONE,
        field_new!(Fq, "50282768576993852396837016734785827995873736060526044576695150098366033779477101935690773566664707984443383101531713651773202185700462399106346600290809556774367272997391698519046257613281472927139474876682186129147018051720314882"),
        field_new!(Fq, "10657617573509013381109838777859813828752698485010031468067404158142727458091443273471812453523641434043880328903387872531445833781648740830086389541545860051137283451392850981420577616053507303737190704153100286"),
    ];

    #[inline(always)]
    fn mul_fp_by_nonresidue(fe: &Self::Fp) -> Self::Fp {
        let original = *fe;
        original + &original
    }
}
