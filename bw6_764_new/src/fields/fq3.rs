use ark_ff::{
    field_new,
    fields::fp3::{Fp3, Fp3Parameters},
    Field,
};

use crate::{
    fields::{FQ_ONE, FQ_ZERO},
    Fq,
};

pub type Fq3 = Fp3<Fq3Parameters>;

pub struct Fq3Parameters;

impl Fp3Parameters for Fq3Parameters {
    type Fp = Fq;

    /// NONRESIDUE = 2
    // Fq3 = Fq\[u\]/u^3-2
    #[rustfmt::skip]
    const NONRESIDUE: Fq = field_new!(Fq, "2");

    // (MODULUS^3 - 1) % 2^TWO_ADICITY == 0
    const TWO_ADICITY: u32 = 42;

    // (T-1)/2 with T = (MODULUS^3-1) / 2^TWO_ADICITY
    #[rustfmt::skip]
    const T_MINUS_ONE_DIV_TWO: &'static [u64] = &[
        0xa76436e00126a3db,
        0x8c56e130d838c4b1,
        0x5853ad23ee076d3b,
        0xca32a58b96e40e26,
        0x41f720466a100784,
        0xed3750a77efa49f1,
        0xb28e82b61c97dd79,
        0x3fa9ea62d633df43,
        0x9b1eeef313b32d38,
        0xce3b2e3c5c1f2df,
        0x69a3efbef21fe284,
        0x9d9ea05e4cb827b0,
        0xa047adcbb02102c2,
        0xeef5b1eee1e8eb93,
        0xff56e61a7030f59b,
        0xdff3bb6ffc86b5a4,
        0xa81c116486ed6b6d,
        0x698045810ca28d3f,
        0xe088e04a984ba8d8,
        0xdcba607b1a82dd93,
        0x52c283f674be07b9,
        0x4b321dad63ba7dcf,
        0xc1a8aab3ddf1f28d,
        0xa4bf3d01a033d132,
        0x8d05b9505e7051e7,
        0xdff0d421d46a08e0,
        0x80085b7a67a46ffd,
        0x5a524b0874232c96,
        0x4467a4047730a7a9,
        0x1edc46ec934c3e48,
        0x7dc054682d002e2f,
        0x5f76070bfed2b171,
        0xde0bda54a0c32ec3,
        0x5093c5674238dc54,
        0x3fb02f1f952b66a7,
        0x47,
    ];

    // NONRESIDUE = 11 is a non square in Fq
    // NONRESIDUE^T % q
    #[rustfmt::skip]
    const QUADRATIC_NONRESIDUE_TO_T: (Fq, Fq, Fq) = (
        field_new!(Fq, "36281213855426439655875998069512090302156228339057590040542626126176172073633236075522044209736801974398446221405569928284268605770677327674670642401667010078204558931826545732812874295596621528807932300104308412484711263351484093"),
        FQ_ZERO,
        FQ_ZERO,
    );

    // NQR ^ (MODULUS^i - 1)/3, i=0,1,2 with NQR = u = 11
    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP3_C1: &'static [Fq] = &[
        FQ_ONE,
        field_new!(Fq, "50282768576993852396837016734785827995873736060526044576695150098366033779477101935690773566664707984443383101531713651773202185700462399106346600290809556774367272997391698519046257613281472927139474876682186129147018051720314882"),
        field_new!(Fq, "10657617573509013381109838777859813828752698485010031468067404158142727458091443273471812453523641434043880328903387872531445833781648740830086389541545860051137283451392850981420577616053507303737190704153100286"),
    ];

    // NQR ^ (2*MODULUS^i - 2)/3, i=0,1,2 with NQR = 2??
    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP3_C2: &'static [Fq] = &[
        FQ_ONE,
        field_new!(Fq, "10657617573509013381109838777859813828752698485010031468067404158142727458091443273471812453523641434043880328903387872531445833781648740830086389541545860051137283451392850981420577616053507303737190704153100286"),
        field_new!(Fq, "50282768576993852396837016734785827995873736060526044576695150098366033779477101935690773566664707984443383101531713651773202185700462399106346600290809556774367272997391698519046257613281472927139474876682186129147018051720314882"),
    ];

    #[inline(always)]
    fn mul_fp_by_nonresidue(fe: &Self::Fp) -> Self::Fp {
        fe.double()
    }
}
