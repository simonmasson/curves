use crate::*;
use ark_ec::{
    bls12,
    models::{ModelParameters, SWModelParameters},
};
use ark_ff::{field_new, Zero};

pub type G2Affine = bls12::G2Affine<crate::Parameters>;
pub type G2Projective = bls12::G2Projective<crate::Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq2;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = [0, 0]
    const COEFF_A: Fq2 = field_new!(Fq2, g1::Parameters::COEFF_A, g1::Parameters::COEFF_A,);

    /// COEFF_B = [4, 4]
    const COEFF_B: Fq2 = field_new!(
        Fq2,
        field_new!(Fq, "1848385567235229955070141200863335708457808621527270864491832735823068692460646881121670001670724675044489642865347"),
        field_new!(Fq, "554515670170568986521042360259000712537342586458181259347549820746920607738194064336501000501217402513346892859604"),
    );

    /// COFACTOR = (x^8 - 4 x^7 + 5 x^6) - (4 x^4 + 6 x^3 - 4 x^2 - 4 x + 13) //
    /// 9
    /// = 178978112966391770429872195706951844718855093683853815132669241970945030313539039243852192479088181513529506102583770922784546894699581504882782316265473
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x1, 
        0x4b7740500890000, 
        0x35b0c444f61f8a4f, 
        0x713d23cc7e07d3d4, 
        0x2480d445007695be, 
        0x26b936ed0532a3ba, 
        0x89bec512184a10de, 
        0x36ad3a8b3506550,
    ];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    /// 32152196285116200311406820395469099503860990778606491159737426242298400787373
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = field_new!(Fr, "32152196285116200311406820395469099503860990778606491159737426242298400787373");

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G2_GENERATOR_X, G2_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(_: &Self::BaseField) -> Self::BaseField {
        Self::BaseField::zero()
    }
}

pub const G2_GENERATOR_X: Fq2 = field_new!(Fq2, G2_GENERATOR_X_C0, G2_GENERATOR_X_C1);
pub const G2_GENERATOR_Y: Fq2 = field_new!(Fq2, G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1); 

/// G2_GENERATOR_X_C0 =
/// 2175569512351678013626020387127832519202958616247910542086288267061553057690917014229195548018296304290408566150824
#[rustfmt::skip]
pub const G2_GENERATOR_X_C0: Fq = field_new!(Fq, "2175569512351678013626020387127832519202958616247910542086288267061553057690917014229195548018296304290408566150824");

/// G2_GENERATOR_X_C1 =
/// 1455480136315075324333773495377685665942314004450373758512254149659432409540507126580910641812819996371423589637982
#[rustfmt::skip]
pub const G2_GENERATOR_X_C1: Fq = field_new!(Fq, "1455480136315075324333773495377685665942314004450373758512254149659432409540507126580910641812819996371423589637982");

/// G2_GENERATOR_Y_C0 =
/// 453695554480733473288368412191347053890131275820978914433656187464557363619807558217987774747005275240720881001250
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C0: Fq = field_new!(Fq, "453695554480733473288368412191347053890131275820978914433656187464557363619807558217987774747005275240720881001250");

/// G2_GENERATOR_Y_C1 =
/// 284765024633871962824537694444041560725370947541057185548028276727007329812004784062307667341861568049791335227645
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C1: Fq = field_new!(Fq, "284765024633871962824537694444041560725370947541057185548028276727007329812004784062307667341861568049791335227645");
