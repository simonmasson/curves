#![allow(unused_imports)]
use ark_ec::{
    bls12::Bls12Parameters, group::Group, models::SWModelParameters,
    short_weierstrass_jacobian::GroupProjective, AffineCurve, PairingEngine, ProjectiveCurve,
};
use ark_ff::{
    fields::{Field, FpParameters, PrimeField, SquareRootField},
    BigInteger, One, UniformRand, Zero, field_new, Fp12Parameters, BigInteger384,
};
use ark_serialize::CanonicalSerialize;
use ark_std::{rand::Rng, test_rng};
use core::ops::{AddAssign, MulAssign};
use std::convert::TryInto;

use crate::{
    g1,
    g2::{self, Parameters},
    Bls12_381New, Fq, Fq12, Fq6, Fq2, Fr, G1Affine, G1Projective, G2Affine, G2Projective, FqParameters,
};
use ark_algebra_test_templates::{curves::*, groups::*, fields::field_serialization_test};
use ark_ec::short_weierstrass_jacobian::GroupAffine;

#[test]
fn test_g1_projective_curve() {
    curve_tests::<G1Projective>();

    sw_tests::<g1::Parameters>();
}

#[test]
fn test_g1_projective_group() {
    let mut rng = test_rng();
    let a: G1Projective = rng.gen();
    let b: G1Projective = rng.gen();
    group_test(a, b);
}

#[test]
fn test_g1_generator() {
    let generator = G1Affine::prime_subgroup_generator();
    assert!(generator.is_on_curve());
    assert!(generator.is_in_correct_subgroup_assuming_on_curve());
}

#[test]
fn test_g2_projective_curve() {
    curve_tests::<G2Projective>();

    sw_tests::<g2::Parameters>();
}

#[test]
fn test_g2_projective_group() {
    let mut rng = test_rng();
    let a: G2Projective = rng.gen();
    let b: G2Projective = rng.gen();
    group_test(a, b);
}

#[test]
fn test_g2_generator() {
    let generator = G2Affine::prime_subgroup_generator();
    assert!(generator.is_on_curve());
    assert!(generator.is_in_correct_subgroup_assuming_on_curve());
}

#[test]
fn test_fq2_mul_magma(){
    // from magma
    // c11 = 2047204127881377338023965213551819441417205156999526177052724631150735103\
    // 298394122934756810787628829755890431423457*u +
    // 2337415152124335664867613331351620137783262809102406038291273560987369412247071\
    // 884003566334068613834667118017756696
    // c11^2 = 11771590844495974506550102200903888745028818982944044495476246099097804\
    // 22041100779983989261397360364488823207024393*u +
    // 1198343634478615150052897261954110491356266945218311478206573991473538969173076\
    // 854897389881227192574857304990133676
    // c111 = 233741515212433566486761333135162013778326280910240603829127356098736941\
    // 2247071884003566334068613834667118017756696
    // c112 = 204720412788137733802396521355181944141720515699952617705272463115073510\
    // 3298394122934756810787628829755890431423457
    
    let c111 = field_new!(Fq, "2337415152124335664867613331351620137783262809102406038291273560987369412247071884003566334068613834667118017756696");
    let c112 = field_new!(Fq, "2047204127881377338023965213551819441417205156999526177052724631150735103298394122934756810787628829755890431423457");
    let c11 = field_new!(Fq2, c111,c112);

    let c11_square = field_new!(Fq2,
        field_new!(Fq, "1198343634478615150052897261954110491356266945218311478206573991473538969173076854897389881227192574857304990133676"),
        field_new!(Fq, "1177159084449597450655010220090388874502881898294404449547624609909780422041100779983989261397360364488823207024393")
    );
    assert_eq!(c11_square, c11*c11);
}

#[test]
fn test_fq2_frob() {
    let mut rng = ark_std::test_rng();
    let x = Fq2::rand(&mut rng);
    let x_p = x.pow(FqParameters::MODULUS);
    let mut x_frob = x;
    x_frob.frobenius_map(1);
    assert_eq!(x_frob, x_p);
}

#[test]
fn test_fq6_frob() {
    let mut rng = ark_std::test_rng();
    let x = Fq6::rand(&mut rng);
    let x_p = x.pow(FqParameters::MODULUS);
    let mut x_frob = x;
    x_frob.frobenius_map(1);
    assert_eq!(x_frob, x_p);
}

#[test]
fn test_fq12_frob() {
    let mut rng = ark_std::test_rng();
    let x = Fq12::rand(&mut rng);
    let mut x_p = x.pow(FqParameters::MODULUS);
    for power in 1..12 {
        let mut x_pi = x;
        x_pi.frobenius_map(power);
        assert_eq!(x_pi, x_p);
        x_p = x_p.pow(FqParameters::MODULUS);
    }
}

// let mut a_q = a.pow(&characteristic);
// for power in 1..maxpower {
//     let mut a_qi = a;
//     a_qi.frobenius_map(power);
//     assert_eq!(a_qi, a_q, "failed on power {}", power);

//     a_q = a_q.pow(&characteristic);
// }

#[test]
fn test_mul_magma() {
    // from magma
    let a = field_new!(Fq12, field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "178371432392523337361132074508823387032586845342738631734052362\
    5601721488578527427096441217800213163623512601945242"),field_new!(Fq, "190931554537623642297586973960032103879749967669730383438947821\
    2912921685826994774900441300751018615622269602678854"),),field_new!(Fq2, field_new!(Fq, "260225506433249650810158922923594001151746626875797224973008048\
    0099290983495988491586240601596778796100865185660110"),field_new!(Fq, "102624886358758230033606792780511897208111370752610428433163440\
    7589401208331819350806531561009090979882138092378372"),),field_new!(Fq2, field_new!(Fq, "115923546907660381853404029708298582200126882088656522634304103\
    768415610528991302897556698579483135283967017890530"),field_new!(Fq, "186201694982758254647233505250202113643757378379224539664003300\
    7405073883690982301624814599723333594845188467051164"),),),field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "251049048078022575327990858075015098875139731816146752813099651\
    1937981711309974634635124155083382544012118264874319"),field_new!(Fq, "232437547711565651255162984430487569556068897326666671749721110\
    6179460253784475997768664127895919129202727786638341"),),field_new!(Fq2, field_new!(Fq, "233017335557254127298023149735883087603472277205199655502702474\
    0208894281689381010567208026270253358393316059207248"),field_new!(Fq, "252996466497562523898187156597807168857654085417951572556966961\
    3132101217842679707902676463729658023349192716121355"),),field_new!(Fq2, field_new!(Fq, "266732467050875091276892380601813021596353756529426430921556713\
    753210517704038879054027410598064769625222050584095"),field_new!(Fq, "223560370028938482534646876619690576519005424159360863043978001\
    3612517413962008885935047986548803495707879894274419"),),),);
    let b = field_new!(Fq12, field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "130650450701259331098497385499579118110799222419796018332126018\
    2324012777907960314520334592147583573180425572561123"),field_new!(Fq, "636699801952856249556239284888911390634840201804595236905931435\
    981458632557600914830123479444538698958742741136997"),),field_new!(Fq2, field_new!(Fq, "258093250898746918017956449809302418334376457312519931693949083\
    568055808436051705510230705339959868017599026273075"),field_new!(Fq, "467467224820717054153832105915282132938735096584796095319377533\
    667481384836123062685029445165617850004068757310534"),),field_new!(Fq2, field_new!(Fq, "123918163483410930472488816439871912138798641470428981160886338\
    6422328765874033938934573022767888888751713641473026"),field_new!(Fq, "117258053084065680918387895443164435780457226816122859355320018\
    9944038810253933438292907682563199907975537200865240"),),),field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "176752708717099280843267048979301666975415678659592921203732750\
    6441913431296725520443627552950338529153275096035157"),field_new!(Fq, "513816333847613465381166345504568372790252533454770253179524342\
    006298129985949932804962054455157252668873815321487"),),field_new!(Fq2, field_new!(Fq, "503312434803033128114878443120567123233086601691615069637044539\
    927398547736504923500860049342676631647367970633091"),field_new!(Fq, "195701933766174044010788796361386873690170387475783492985665311\
    1501914382291626972093094273431827277530143107057972"),),field_new!(Fq2, field_new!(Fq, "206231514724225510805858166419773717047329599864693635276658449\
    6698506956538559007396720094164604830529368388908313"),field_new!(Fq, "902573625062410430629862800457729912279513377588676388613069989\
    80193427126354136570750869419748589053769779916653"),),),);
    let a_mul_b = field_new!(Fq12, field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "208338210684167115009007283566940478706683301327753503197307852\
    5723989523390085346903531652181030082015018047958512"),field_new!(Fq, "882194588346223995523233255614991495160344606709335019122737115\
    054592517996130444813983997793207970492545664632139"),),field_new!(Fq2, field_new!(Fq, "787488887477965062092803649140176010713346290856959499668531404\
    115175133373055383372473786725641160975099110782849"),field_new!(Fq, "340775074336660691821991599745621082753525031592760315944639026\
    382208322239977364956994199357945038098005577310631"),),field_new!(Fq2, field_new!(Fq, "544401411090549894811211077768400756347830319465031271647846001\
    309836932752618288973035190915268766512589851169262"),field_new!(Fq, "578884577297065994090659363770163155579036024013136821902594320\
    340890233593248967751275691331666809988753514659543"),),),field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "605377653910473708683270329440778749248730831881933419471946289\
    213623084260876789773016964775914761880674335135893"),field_new!(Fq, "236766760402525516335555803363775245659696626123427781851351789\
    5849194199754704537228399269398562873752875301549031"),),field_new!(Fq2, field_new!(Fq, "765568638014274657063864517199684187090562375062814859168916166\
    963685589684416941081008033955303491839450000346057"),field_new!(Fq, "262334335776294363189114346267857094445339704776253062477642951\
    1885999031334060932965144764914924365969449659330052"),),field_new!(Fq2, field_new!(Fq, "263446156159393429921776629471116829493885313979102087683890056\
    7166659747463190893332672001372901097571598881379624"),field_new!(Fq, "197401523990666243531321653165659628341510585796284352527830871\
    4239630903655433993236751683868687858457832900243731"),),),);
    assert_eq!(a*b, a_mul_b);
    
}

#[test]
fn test_with_magma() {
    let a = G1Affine::prime_subgroup_generator();
    let a_prep = <Bls12_381New as PairingEngine>::G1Prepared::from(a);
    
    let b = G2Affine::prime_subgroup_generator();
    let b_prep = <Bls12_381New as PairingEngine>::G2Prepared::from(b);

    let ml = <Bls12_381New as PairingEngine>::miller_loop(core::iter::once(&(a_prep, b_prep)));
    // println!("ml={}", ml);

    let expected_pairing = field_new!(Fq12, field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "185707079375104303095614268883039678355431936597079196873864733\
    2269226369362309497502197195591688821883237015196697"),field_new!(Fq, "104591311052150811501211334085788463676192884684281784657717075\
    4471778697183128040140816014430332625180099738073067"),),field_new!(Fq2, field_new!(Fq, "187807286250445703307333505284794673819034072271615910311895203\
    3748879990168543287515033989570683112673578877639472"),field_new!(Fq, "471926399094328857976813729043894052752051554716388081403034139\
    45640887648811952993278247152298178814035465926458"),),field_new!(Fq2, field_new!(Fq, "200370338236946910158127209302903896161408890138839356772620818\
    0878850995369389626702461490011379475198558657827354"),field_new!(Fq, "119860256902805992637121055063126816848026676213683396833884593\
    3781404178636855800991947422826048797197592283900241"),),),field_new!(Fq6, field_new!(Fq2, field_new!(Fq, "595383509132034962194621633901357174403071611056566497050295559\
    043280204551085708203476484474379643734331930352242"),field_new!(Fq, "220690389297910421668633550735668158795951921738871874263336972\
    6467762782913772026492167323323250175441658949964730"),),field_new!(Fq2, field_new!(Fq, "236104774864128343040165499942773916646153159409628248107181020\
    5605605537744969797545141562602611268456564722229152"),field_new!(Fq, "231624280084903255128692558736303846188674270924192635111266436\
    2571381787238148365156973844112552962373635192376568"),),field_new!(Fq2, field_new!(Fq, "201600589618297070740558553140044802407953718760058598621978107\
    0751680641601268448661693213591530625347176836401720"),field_new!(Fq, "262502209114848400318053625932752280381484109417440033098665454\
    0892652070551663050632665639246032534464540796027846"),),),);

    let fe = <Bls12_381New as PairingEngine>::final_exponentiation(&ml).unwrap();
    assert_eq!(fe, expected_pairing);
    // // let fe_plus = fe.pow(crate::FrParameters::MODULUS);
    // println!("end={}", fe);
}

#[test]
fn test_bilinearity() {
    let mut rng = test_rng();
    let a: G1Projective = rng.gen();
    let b: G2Projective = rng.gen();
    let s: Fr = rng.gen();

    let mut sa = a;
    sa.mul_assign(s);
    let mut sb = b;
    sb.mul_assign(s);

    let ans1 = Bls12_381New::pairing(sa, b);
    let ans2 = Bls12_381New::pairing(a, sb);
    let ans3 = Bls12_381New::pairing(a, b).pow(s.into_repr());

    assert_eq!(ans1, ans2);
    assert_eq!(ans2, ans3);

    assert_ne!(ans1, Fq12::one());
    assert_ne!(ans2, Fq12::one());
    assert_ne!(ans3, Fq12::one());

    assert_eq!(ans1.pow(Fr::characteristic()), Fq12::one());
    assert_eq!(ans2.pow(Fr::characteristic()), Fq12::one());
    assert_eq!(ans3.pow(Fr::characteristic()), Fq12::one());
}

#[test]
fn test_g1_generator_raw() {
    let mut x = Fq::zero();
    let mut i = 0;
    loop {
        // y^2 = x^3 + b
        let mut rhs = x;
        rhs.square_in_place();
        rhs.mul_assign(&x);
        rhs.add_assign(&g1::Parameters::COEFF_B);

        if let Some(y) = rhs.sqrt() {
            let p = G1Affine::new(x, if y < -y { y } else { -y }, false);
            assert!(!p.is_in_correct_subgroup_assuming_on_curve());

            let g1 = p.scale_by_cofactor();
            if !g1.is_zero() {
                assert_eq!(i, 1);
                let g1 = G1Affine::from(g1);

                assert!(g1.is_in_correct_subgroup_assuming_on_curve());

                assert_eq!(g1, G1Affine::prime_subgroup_generator());
                break;
            }
        }

        i += 1;
        x.add_assign(&Fq::one());
    }
}
