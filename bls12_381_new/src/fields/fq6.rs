use crate::*;
use ark_ff::{field_new, fields::*};

pub type Fq6 = Fp6<Fq6Parameters>;

#[derive(Clone, Copy)]
pub struct Fq6Parameters;

impl Fp6Parameters for Fq6Parameters {
    type Fp2Params = Fq2Parameters;

    /// NONRESIDUE = U + 1
    #[rustfmt::skip]
    const NONRESIDUE: Fq2 = field_new!(Fq2,
		FQ_ONE, FQ_ONE
    );

    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP6_C1: &'static [Fq2] = &[
		// Fp2(u+1)^(((q^0) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "1"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((q^1) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "2565426425003363327092389698020027996240501025191636609546976088835994803866880206125173869101883662827093368455773"),
			field_new!(Fq, "1227582583088965321571048622484521809065832057833672695879423718923300682822107156878939451164697862803880168597822"),
		),
		// Fp2(u+1)^(((q^2) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "2680159072491083434283635177082100889479298905786357595840289005788905202900434977410295569058861055203330140143615"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((q^3) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "1613595988039831080927337269208982743643109734016055682541957675930849963628457655388928970775597368712906404348674"),
			field_new!(Fq, "1174743787651468920688966025964141838982748126779209324449458548231176070568825944497127725991966247655513358503436"),
		),
		// Fp2(u+1)^(((q^4) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "568069564169735887784523595428185157672868461154544401167503000216125933363689723611179842011137"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((q^5) - 1) / 3)
		field_new!(Fq2,
			field_new!(Fq, "1181295731938972461683682515274662814644034243221393214937381169120054440640538093738740164967620526089020191505059"),
			field_new!(Fq, "277832701750649192591690092803173129215242316601660733184275199788972850677004876250354325265886668355116455053495"),
		),
    ];

    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP6_C2: &'static [Fq2] = &[
		// Fp2(u+1)^(((2q^0) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "1"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((2q^1) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "536187724116991994459197995979494093054454977659331803743392198900642024489925128841197016193475721225132435343971"),
			field_new!(Fq, "684842914684469786117134137194506740350090963732157001648108899133780288260469878796129995995567863145240900252228"),
		),
		// Fp2(u+1)^(((2q^2) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "568069564169735887784523595428185157672868461154544401167503000216125933363689723611179842011137"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((2q^3) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "2326681173536497947936907926424115327127658301786366177915912236214372448102194277498344147674759565727893430571330"),
			field_new!(Fq, "245297195754368920150198260906433644774128839847454322118986473510500725836398077868442160402778375532706770886066"),
		),
		// Fp2(u+1)^(((2q^4) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "2680159072491083434283635177082100889479298905786357595840289005788905202900434977410295569058861055203330140143615"),
			field_new!(Fq, "0"),
		),
		// Fp2(u+1)^(((2q^5) - 2) / 3)
		field_new!(Fq2,
			field_new!(Fq, "2497449247328676927307303560100064134345531722983387525367010498771884735543756548913301840976866270675994098394205"),
			field_new!(Fq, "1750018962052244728584372343150896392139602697634931429746062094299168589971070020961849346024204540136562311016459"),
		),
    ];

    /// Multiply this element by the nonresidue u+1.
    /// Make this generic.
    fn mul_fp2_by_nonresidue(fe: &Fq2) -> Fq2 {
        // (x+uy) * (u+1) = xu + uÂ²y + x+uy = x-5y + u*(x+y)
        let mut copy = *fe;
		let x = copy.c0;
		let y = copy.c1;
		copy.c0 = x -y.double().double() - y;
		copy.c1 = x+y;
        copy
    }
}
